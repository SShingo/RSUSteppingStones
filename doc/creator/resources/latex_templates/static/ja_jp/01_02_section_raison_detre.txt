\subsection{\RDM Pros \& Cons}
\subsubsection{Pros}
\RDM は使用頻度の高い処理をSASマクロとして提供するもので、このモジュールを積極的に利用することで以下の効果が見込まれます。
\begin{itemize}
	\item コーディングの効率化
	\item コードの短縮
	\item コードの均質化
	\item 可読性の向上
	\item プログラムをSASマクロ言語に統一することで他言語（SQL、LUAなど）の開発スキルを要求しない
	\item プログラム作成中に複数の言語を渡り歩く必要を減らし、思考の断絶を防ぐ
	\item 開発効率の向上（特にプロトタイプ作成、テストコード作成などのワンショット開発の効率向上）
	\item Base SASコード開発に不慣れな開発者がスムーズに開発に着手可能
\end{itemize}
\subsubsection{Cons}
一方で、\RDM を用いることが憚られる場合も存在します。
\begin{itemize}
	\item コードの可視性が求められる場合
	\item 全コードに対する編集可能性が求められる場合
	\item パフォーマンスが求められる部分\footnote{例えば\RDM が提供する「マクロによるループ処理」は、人間にとって処理は分かりやすいですが、スピードは各段に遅いです（\RDM だから遅いのではなく、一般に遅い）。スピードが求められる場合にはdata step一発で処理する等の最適化が必要です。}
	\item Base SASのプログラミングスキル向上を目的とする場合
\end{itemize}

\subsection{\RDM の利用シーン}
以下のようなシーンで、\RDM は効果を発揮すると考えます。
\begin{itemize}
\item ワーカーのスキルに拠らず、「同一機能 = 同一コード」というコードの均質化が求められる多数の人間による共同開発時
\item プロトタイプ作成など、とにかく迅速な開発が求められる時
\end{itemize}